
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
#include <semaphore.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <time.h>

#define BUFF_SIZE 1024 
#define QTD_clientes 3 
#define PORTA 9200 

int client_counter = 0;
int clientes = 0;

typedef struct monitor {
	FILE *arq;
	sem_t mutex;
} monitor_tester;
monitor_tester arquivo_monitor;

void funcao_monitor(char* s) {
	sem_wait(&arquivo_monitor.mutex); 
	fprintf(arquivo_monitor.arq, "%s\n", s);
	sem_post(&arquivo_monitor.mutex); 
}



void* handle_client(void* p) {
    long cliente_fd = (long) p;
        char day[3], month[3], year[5];
            int horas;

            time_t now = time(NULL);
            struct tm *t = localtime(&now);

            sprintf(day, "%02d", t->tm_mday, sizeof(day));
            sprintf(month, "%02d", t->tm_mon + 1, sizeof(month));
            sprintf(year, "%04d", t->tm_year + 1900, sizeof(year));
            horas = t->tm_hour;

            char msg[30];
            sprintf(msg, "%dh  of  %s / %s / %s\n", horas, day, month, year);
            write(cliente_fd, msg, strlen(msg));
            printf("Cliente %ld recebeu data/hora\n", cliente_fd);
    char *msg_bem_vindo_servidor = "BEM VINDO\n";
   
    char buffer[BUFF_SIZE+1];
    write(cliente_fd, msg_bem_vindo_servidor, strlen(msg_bem_vindo_servidor));
while(1){
    	read(cliente_fd, buffer, BUFF_SIZE);
		buffer[BUFF_SIZE] = '\0';

        funcao_monitor(buffer);

         if (strcmp("SHTDWN\n", buffer) == 0) {
            printf("DERRUBANDO SERVIDOR\n");
            write(cliente_fd, "SERVER FINALIZADA\n", strlen("SERVER FINALIZADO\n"));
            fclose(arquivo_monitor.arq); 
            exit(0);
        }
     
    }
}

int main(void){
    time_t t;
    
    int socket_servidor;
    
    long cliente_fd[QTD_clientes];
    pthread_t threads_cliente[QTD_clientes];

    struct sockaddr_in server_addr;
    struct sockaddr_in cli_addr[QTD_clientes];
    int cli_addr_size[QTD_clientes];

    sem_init(&arquivo_monitor.mutex, 0, 1);
    arquivo_monitor.arq = fopen("monitor.txt", "wt"); // abre arquivo
    srand((unsigned) time(&t));

    printf("Iniciando servidor na porta %d...\n", PORTA);

    socket_servidor = socket(AF_INET, SOCK_STREAM, 0);

	if (socket_servidor < 0) {
		perror("socket() error!\n");
		exit(0);
	}

    server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = INADDR_ANY;
	server_addr.sin_port = htons(PORTA);

	int bind_result = bind(socket_servidor,
			       (struct sockaddr*) &server_addr,
		               sizeof(server_addr));

	if (bind_result < 0) {
		perror("bind() error!\n");
		exit(0);
	}


	int listen_result = listen(socket_servidor, QTD_clientes);

	if (listen_result < 0) {
		perror("listen() error!\n");
		exit(0);
	}

    while(cliente_fd[clientes] = accept(socket_servidor,(struct sockaddr*) &cli_addr[clientes],&cli_addr_size[clientes])) {

		if (cliente_fd < 0 ) {
			perror("accept() error!\n");
			exit(0);
		}
		printf("Um novo cliente foi conectado!\n");

		char *ip_do_cliente_addr = inet_ntoa(cli_addr[clientes].sin_addr);
		printf("Endereco cliente: %s\n", ip_do_cliente_addr);

		pthread_create(&threads_cliente[clientes], NULL, handle_client,
				(void*) cliente_fd[clientes]);
                
		clientes++;
        printf("qtd clientes: %d\n", clientes);

	}

    fclose(arquivo_monitor.arq);


}
