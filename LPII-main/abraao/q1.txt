
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
#include <semaphore.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <time.h>

#define BUFF_SIZE 1024 
#define QTD_CLIENTS 3 
#define PORTA 9201 

int client_counter = 0;

typedef struct monitor {
	FILE *arq;
	sem_t mutex;
} t_monitor;
t_monitor monitor_arq;

void mon_write(char* s) {
	sem_wait(&monitor_arq.mutex); //protocolo entrada
	fprintf(monitor_arq.arq, "%s\n", s);
	sem_post(&monitor_arq.mutex); //protocolo saida
}

int clients = 0;

void* handle_client(void* p) {
    long cli_sock = (long) p;
        char day[3], month[3], year[5];
            int hour;

            time_t now = time(NULL);
            struct tm *t = localtime(&now);

            sprintf(day, "%02d", t->tm_mday, sizeof(day));
            sprintf(month, "%02d", t->tm_mon + 1, sizeof(month));
            sprintf(year, "%04d", t->tm_year + 1900, sizeof(year));
            hour = t->tm_hour;

            char msg[30];
            sprintf(msg, "%dh  of  %s / %s / %s\n", hour, day, month, year);
            write(cli_sock, msg, strlen(msg));
            printf("Cliente %ld recebeu data/hora\n", cli_sock);
    char *server_welcome = "BEM VINDO\n";
   
    char buffer[BUFF_SIZE+1];
    write(cli_sock, server_welcome, strlen(server_welcome));
while(1){
    	read(cli_sock, buffer, BUFF_SIZE);
		buffer[BUFF_SIZE] = '\0';

        mon_write(buffer);

         if (strcmp("SHTDWN\n", buffer) == 0) {
            printf("DERRUBANDO SERVIDOR\n");
            write(cli_sock, "SERVER FINALIZADA\n", strlen("SERVER FINALIZADO\n"));
            fclose(monitor_arq.arq); // fecha log
            exit(0);
        }

        
        
    }
}

int main(void){
    int server_sock;
    time_t t;
    long cli_sock[QTD_CLIENTS];
    pthread_t cli_threads[QTD_CLIENTS];

    struct sockaddr_in server_addr;
    struct sockaddr_in cli_addr[QTD_CLIENTS];
    int cli_addr_size[QTD_CLIENTS];

    sem_init(&monitor_arq.mutex, 0, 1);
    monitor_arq.arq = fopen("monitor.txt", "wt"); // abre arquivo
    srand((unsigned) time(&t));

    printf("Iniciando servidor na porta %d...\n", PORT);

    server_sock = socket(AF_INET, SOCK_STREAM, 0);

	if (server_sock < 0) {
		perror("socket() error!\n");
		exit(-1);
	}

    server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = INADDR_ANY;
	server_addr.sin_port = htons(PORT);

    // reebe retorno do bind
	int bind_result = bind(server_sock,
			       (struct sockaddr*) &server_addr,
		               sizeof(server_addr));

	if (bind_result < 0) {
		perror("bind() error!\n");
		exit(-1);
	}


	int listen_result = listen(server_sock, QTD_CLIENTS);

	if (listen_result < 0) {
		perror("listen() error!\n");
		exit(-1);
	}

    while(cli_sock[clients] = accept(server_sock,
				     (struct sockaddr*) &cli_addr[clients],
				      &cli_addr_size[clients])) {

		if (cli_sock < 0 ) {
			perror("accept() error!\n");
			exit(-1);
		}
		printf("Novo cliente conectado!\n");

		char *cli_ip_addr = inet_ntoa(cli_addr[clients].sin_addr);
		printf("Endereco do cliente: %s\n", cli_ip_addr);

		pthread_create(&cli_threads[clients], NULL, handle_client,
				(void*) cli_sock[clients]);
                
		clients++;
        printf("qtd clients: %d\n", clients);

	}

    fclose(monitor_arq.arq);


}
